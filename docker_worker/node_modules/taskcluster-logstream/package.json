{
  "name": "taskcluster-logstream",
  "version": "0.1.3",
  "description": "Readable stream interface to live logger",
  "main": "reader.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/taskcluster/logclient.git"
  },
  "keywords": [
    "taskcluster"
  ],
  "author": {
    "name": "James Lal [:lightsofapollo]"
  },
  "license": "Apache2",
  "bugs": {
    "url": "https://github.com/taskcluster/logclient/issues"
  },
  "devDependencies": {
    "mocha": "~1.17.0",
    "mocha-as-promised": "~2.0.0",
    "range-parser": "~1.0.0",
    "promise": "~3.2.0"
  },
  "dependencies": {
    "debug": "~0.7.4"
  },
  "readme": "taskcluster-logstream\n=========\n\nTaskcluster uses azure (over http) to store all of our logging data...\nGenerally this process uses standard http conventions + polling but we\nalso needed some way to indicate when the stream ends.\n\nThe readable stream interface provided does something like this:\n\n - issue a request to the given url (use range if offset is available and if-none-match conditionals if etag is available)\n   - a. if its not in the 200 range retry in N ms\n   - b. if its in the 200 range continue\n   - c. if the request contains the 'x-ms-meta-complete' header mark\n      stream as complete (end event).\n - record the byte offset\n - record the etag\n - emit data from server in the readable stream (data event)\n - repeat these steps in N ms.\n\n## Usage\n\n```js\nvar Reader = require('taskcluster-logstream');\n\nvar stream = new Reader('myazureurl.txt');\nstream.pipe(process.stdout);\n```\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/taskcluster/logclient",
  "_id": "taskcluster-logstream@0.1.3",
  "dist": {
    "shasum": "090e2cc0a02ffa9b16a961024754a4e417dcbc9f"
  },
  "_from": "taskcluster-logstream@",
  "_resolved": "https://registry.npmjs.org/taskcluster-logstream/-/taskcluster-logstream-0.1.3.tgz"
}
